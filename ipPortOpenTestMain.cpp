/***************************************************************
 * Name:      ipPortOpenTestMain.cpp
 * Purpose:   Code for Application Frame
 * Author:    JamesBrooks ()
 * Created:   2017-07-09
 * Copyright: JamesBrooks ()
 * License:
 **************************************************************/

#include "ipPortOpenTestMain.h"
#include <wx/msgdlg.h>
#include <winsock.h>
#include <thread>
#include <mutex>
#include "ipHeader.h"


//(*InternalHeaders(ipPortOpenTestFrame)
#include <wx/font.h>
#include <wx/intl.h>
#include <wx/string.h>
//*)

//helper functions
enum wxbuildinfoformat {
    short_f, long_f };

wxString wxbuildinfo(wxbuildinfoformat format)
{
    wxString wxbuild(wxVERSION_STRING);

    if (format == long_f )
    {
#if defined(__WXMSW__)
        wxbuild << _T("-Windows");
#elif defined(__UNIX__)
        wxbuild << _T("-Linux");
#endif

#if wxUSE_UNICODE
        wxbuild << _T("-Unicode build");
#else
        wxbuild << _T("-ANSI build");
#endif // wxUSE_UNICODE
    }

    return wxbuild;
}

//(*IdInit(ipPortOpenTestFrame)
const long ipPortOpenTestFrame::ID_TEXTCTRL1 = wxNewId();
const long ipPortOpenTestFrame::ID_TEXTCTRL2 = wxNewId();
const long ipPortOpenTestFrame::ID_STATICTEXT1 = wxNewId();
const long ipPortOpenTestFrame::ID_STATICTEXT2 = wxNewId();
const long ipPortOpenTestFrame::ID_BUTTON1 = wxNewId();
const long ipPortOpenTestFrame::ID_TEXTCTRL3 = wxNewId();
const long ipPortOpenTestFrame::ID_STATICTEXT3 = wxNewId();
const long ipPortOpenTestFrame::idMenuQuit = wxNewId();
const long ipPortOpenTestFrame::idMenuAbout = wxNewId();
const long ipPortOpenTestFrame::ID_STATUSBAR1 = wxNewId();
//*)

BEGIN_EVENT_TABLE(ipPortOpenTestFrame,wxFrame)
    //(*EventTable(ipPortOpenTestFrame)
    //*)
END_EVENT_TABLE()

ipPortOpenTestFrame::ipPortOpenTestFrame(wxWindow* parent,wxWindowID id)
{
    //(*Initialize(ipPortOpenTestFrame)
    wxMenuItem* MenuItem2;
    wxMenuItem* MenuItem1;
    wxMenu* Menu1;
    wxMenuBar* MenuBar1;
    wxMenu* Menu2;

    Create(parent, id, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxDEFAULT_FRAME_STYLE, _T("id"));
    SetClientSize(wxSize(516,302));
    SetBackgroundColour(wxColour(83,166,206));
    TextCtrl1 = new wxTextCtrl(this, ID_TEXTCTRL1, _("23"), wxPoint(376,40), wxDefaultSize, wxTE_CENTRE, wxDefaultValidator, _T("ID_TEXTCTRL1"));
    TextCtrl2 = new wxTextCtrl(this, ID_TEXTCTRL2, _("127.0.0.1"), wxPoint(376,80), wxDefaultSize, wxTE_CENTRE|wxTE_RIGHT, wxDefaultValidator, _T("ID_TEXTCTRL2"));
    StaticText1 = new wxStaticText(this, ID_STATICTEXT1, _("Port"), wxPoint(304,48), wxDefaultSize, 0, _T("ID_STATICTEXT1"));
    StaticText1->SetForegroundColour(wxColour(255,255,0));
    StaticText2 = new wxStaticText(this, ID_STATICTEXT2, _("IP Address"), wxPoint(304,88), wxDefaultSize, 0, _T("ID_STATICTEXT2"));
    StaticText2->SetForegroundColour(wxColour(255,255,0));
    Button1 = new wxButton(this, ID_BUTTON1, _("Connect to Host"), wxPoint(376,136), wxDefaultSize, 0, wxDefaultValidator, _T("ID_BUTTON1"));
    TextCtrl3 = new wxTextCtrl(this, ID_TEXTCTRL3, wxEmptyString, wxPoint(40,40), wxSize(232,128), 0, wxDefaultValidator, _T("ID_TEXTCTRL3"));
    StaticText3 = new wxStaticText(this, ID_STATICTEXT3, _("IP Port Access"), wxPoint(32,200), wxDefaultSize, 0, _T("ID_STATICTEXT3"));
    StaticText3->SetForegroundColour(wxColour(255,255,0));
    wxFont StaticText3Font(24,wxFONTFAMILY_SWISS,wxFONTSTYLE_NORMAL,wxFONTWEIGHT_BOLD,false,_T("Consolas"),wxFONTENCODING_DEFAULT);
    StaticText3->SetFont(StaticText3Font);
    MenuBar1 = new wxMenuBar();
    Menu1 = new wxMenu();
    MenuItem1 = new wxMenuItem(Menu1, idMenuQuit, _("Quit\tAlt-F4"), _("Quit the application"), wxITEM_NORMAL);
    Menu1->Append(MenuItem1);
    MenuBar1->Append(Menu1, _("&File"));
    Menu2 = new wxMenu();
    MenuItem2 = new wxMenuItem(Menu2, idMenuAbout, _("About\tF1"), _("Show info about this application"), wxITEM_NORMAL);
    Menu2->Append(MenuItem2);
    MenuBar1->Append(Menu2, _("Help"));
    SetMenuBar(MenuBar1);
    StatusBar1 = new wxStatusBar(this, ID_STATUSBAR1, 0, _T("ID_STATUSBAR1"));
    int __wxStatusBarWidths_1[1] = { -1 };
    int __wxStatusBarStyles_1[1] = { wxSB_NORMAL };
    StatusBar1->SetFieldsCount(1,__wxStatusBarWidths_1);
    StatusBar1->SetStatusStyles(1,__wxStatusBarStyles_1);
    SetStatusBar(StatusBar1);

    Connect(ID_BUTTON1,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&ipPortOpenTestFrame::OnButton1Click);
    Connect(idMenuQuit,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&ipPortOpenTestFrame::OnQuit);
    Connect(idMenuAbout,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&ipPortOpenTestFrame::OnAbout);
    //*)
}

ipPortOpenTestFrame::~ipPortOpenTestFrame()
{
    //(*Destroy(ipPortOpenTestFrame)
    //*)
}

void ipPortOpenTestFrame::OnQuit(wxCommandEvent& event)
{
    Close();
}

void ipPortOpenTestFrame::OnAbout(wxCommandEvent& event)
{
    wxString msg = wxbuildinfo(long_f);
    wxMessageBox(msg, _("Welcome to..."));
}

void ipPortOpenTestFrame::OnButton2Click(wxCommandEvent& event)
{
}

void ipPortOpenTestFrame::OnButton1Click(wxCommandEvent& event)
{
    int PORT=0;
    char* IP;

    ConnectToHost(PORT,IP);
}
